// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go

// Package adapter is a generated GoMock package.
package adapter

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockDBAdapter is a mock of DBAdapter interface.
type MockDBAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockDBAdapterMockRecorder
}

// MockDBAdapterMockRecorder is the mock recorder for MockDBAdapter.
type MockDBAdapterMockRecorder struct {
	mock *MockDBAdapter
}

// NewMockDBAdapter creates a new mock instance.
func NewMockDBAdapter(ctrl *gomock.Controller) *MockDBAdapter {
	mock := &MockDBAdapter{ctrl: ctrl}
	mock.recorder = &MockDBAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBAdapter) EXPECT() *MockDBAdapterMockRecorder {
	return m.recorder
}

// Beginx mocks base method.
func (m *MockDBAdapter) Beginx() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Beginx")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Beginx indicates an expected call of Beginx.
func (mr *MockDBAdapterMockRecorder) Beginx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beginx", reflect.TypeOf((*MockDBAdapter)(nil).Beginx))
}

// BindNamed mocks base method.
func (m *MockDBAdapter) BindNamed(query string, arg interface{}) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindNamed", query, arg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BindNamed indicates an expected call of BindNamed.
func (mr *MockDBAdapterMockRecorder) BindNamed(query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindNamed", reflect.TypeOf((*MockDBAdapter)(nil).BindNamed), query, arg)
}

// DriverName mocks base method.
func (m *MockDBAdapter) DriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName.
func (mr *MockDBAdapterMockRecorder) DriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockDBAdapter)(nil).DriverName))
}

// Get mocks base method.
func (m *MockDBAdapter) Get(dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDBAdapterMockRecorder) Get(dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBAdapter)(nil).Get), varargs...)
}

// MapperFunc mocks base method.
func (m *MockDBAdapter) MapperFunc(mf func(string) string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MapperFunc", mf)
}

// MapperFunc indicates an expected call of MapperFunc.
func (mr *MockDBAdapterMockRecorder) MapperFunc(mf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapperFunc", reflect.TypeOf((*MockDBAdapter)(nil).MapperFunc), mf)
}

// MustBegin mocks base method.
func (m *MockDBAdapter) MustBegin() *sqlx.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBegin")
	ret0, _ := ret[0].(*sqlx.Tx)
	return ret0
}

// MustBegin indicates an expected call of MustBegin.
func (mr *MockDBAdapterMockRecorder) MustBegin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBegin", reflect.TypeOf((*MockDBAdapter)(nil).MustBegin))
}

// MustExec mocks base method.
func (m *MockDBAdapter) MustExec(query string, args ...interface{}) sql.Result {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustExec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	return ret0
}

// MustExec indicates an expected call of MustExec.
func (mr *MockDBAdapterMockRecorder) MustExec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustExec", reflect.TypeOf((*MockDBAdapter)(nil).MustExec), varargs...)
}

// NamedExec mocks base method.
func (m *MockDBAdapter) NamedExec(query string, arg interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExec", query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExec indicates an expected call of NamedExec.
func (mr *MockDBAdapterMockRecorder) NamedExec(query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExec", reflect.TypeOf((*MockDBAdapter)(nil).NamedExec), query, arg)
}

// NamedQuery mocks base method.
func (m *MockDBAdapter) NamedQuery(query string, arg interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedQuery", query, arg)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQuery indicates an expected call of NamedQuery.
func (mr *MockDBAdapterMockRecorder) NamedQuery(query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockDBAdapter)(nil).NamedQuery), query, arg)
}

// PrepareNamed mocks base method.
func (m *MockDBAdapter) PrepareNamed(query string) (*sqlx.NamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamed", query)
	ret0, _ := ret[0].(*sqlx.NamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamed indicates an expected call of PrepareNamed.
func (mr *MockDBAdapterMockRecorder) PrepareNamed(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamed", reflect.TypeOf((*MockDBAdapter)(nil).PrepareNamed), query)
}

// Preparex mocks base method.
func (m *MockDBAdapter) Preparex(query string) (*sqlx.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preparex", query)
	ret0, _ := ret[0].(*sqlx.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preparex indicates an expected call of Preparex.
func (mr *MockDBAdapterMockRecorder) Preparex(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preparex", reflect.TypeOf((*MockDBAdapter)(nil).Preparex), query)
}

// QueryRowx mocks base method.
func (m *MockDBAdapter) QueryRowx(query string, args ...interface{}) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowx", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowx indicates an expected call of QueryRowx.
func (mr *MockDBAdapterMockRecorder) QueryRowx(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowx", reflect.TypeOf((*MockDBAdapter)(nil).QueryRowx), varargs...)
}

// Queryx mocks base method.
func (m *MockDBAdapter) Queryx(query string, args ...interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryx", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryx indicates an expected call of Queryx.
func (mr *MockDBAdapterMockRecorder) Queryx(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryx", reflect.TypeOf((*MockDBAdapter)(nil).Queryx), varargs...)
}

// Rebind mocks base method.
func (m *MockDBAdapter) Rebind(query string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebind", query)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind.
func (mr *MockDBAdapterMockRecorder) Rebind(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockDBAdapter)(nil).Rebind), query)
}

// Select mocks base method.
func (m *MockDBAdapter) Select(dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDBAdapterMockRecorder) Select(dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDBAdapter)(nil).Select), varargs...)
}

// Unsafe mocks base method.
func (m *MockDBAdapter) Unsafe() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsafe")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// Unsafe indicates an expected call of Unsafe.
func (mr *MockDBAdapterMockRecorder) Unsafe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsafe", reflect.TypeOf((*MockDBAdapter)(nil).Unsafe))
}

// MockIDGenerator is a mock of IDGenerator interface.
type MockIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIDGeneratorMockRecorder
}

// MockIDGeneratorMockRecorder is the mock recorder for MockIDGenerator.
type MockIDGeneratorMockRecorder struct {
	mock *MockIDGenerator
}

// NewMockIDGenerator creates a new mock instance.
func NewMockIDGenerator(ctrl *gomock.Controller) *MockIDGenerator {
	mock := &MockIDGenerator{ctrl: ctrl}
	mock.recorder = &MockIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDGenerator) EXPECT() *MockIDGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIDGenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockIDGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIDGenerator)(nil).Generate))
}
