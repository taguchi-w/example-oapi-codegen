// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/taguchi-w/example-oapi-codegen/pkg/api"
)

// MockPetAdapter is a mock of PetAdapter interface.
type MockPetAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockPetAdapterMockRecorder
}

// MockPetAdapterMockRecorder is the mock recorder for MockPetAdapter.
type MockPetAdapterMockRecorder struct {
	mock *MockPetAdapter
}

// NewMockPetAdapter creates a new mock instance.
func NewMockPetAdapter(ctrl *gomock.Controller) *MockPetAdapter {
	mock := &MockPetAdapter{ctrl: ctrl}
	mock.recorder = &MockPetAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetAdapter) EXPECT() *MockPetAdapterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPetAdapter) Create(ctx context.Context, req CreatePetRequest) (*api.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*api.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPetAdapterMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetAdapter)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockPetAdapter) Delete(ctx context.Context, req DeletePetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPetAdapterMockRecorder) Delete(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPetAdapter)(nil).Delete), ctx, req)
}

// Get mocks base method.
func (m *MockPetAdapter) Get(ctx context.Context, req GetPetRequest) (*api.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*api.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPetAdapterMockRecorder) Get(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPetAdapter)(nil).Get), ctx, req)
}

// List mocks base method.
func (m *MockPetAdapter) List(ctx context.Context, req GetPetsRequest) ([]*api.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].([]*api.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPetAdapterMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPetAdapter)(nil).List), ctx, req)
}

// Update mocks base method.
func (m *MockPetAdapter) Update(ctx context.Context, req UpdatePetRequest) (*api.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(*api.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPetAdapterMockRecorder) Update(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPetAdapter)(nil).Update), ctx, req)
}
